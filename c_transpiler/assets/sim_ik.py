
from typing import Optional, Protocol

class SimIk(Protocol):

    def addIkElement(self,environmentHandle:int, ikGroupHandle:int, tipDummyHandle:int)->int:
        ...
    
    def addIkElementFromScene(self,environmentHandle:int, ikGroup:int, baseHandle:int, tipHandle:int, targetHandle:int, constraints:int)->tuple[int, dict]:
        ...
    
    def applyIkEnvironmentToScene(self,environmentHandle:int, ikGroup:int, applyOnlyWhenSuccessful:Optional[bool] = None)->int:
        ...
    
    def applySceneToIkEnvironment(self,environmentHandle:int, ikGroup:int)->None:
        ...
    
    def computeJacobian(self,environmentHandle:int, ikGroupHandle:int, options:int)->bool:
        ...
    
    def createDummy(self,environmentHandle:int, dummyName:Optional[str] = None)->int:
        ...
    
    def createEnvironment(self)->int:
        ...
    
    def createIkGroup(self,environmentHandle:int, ikGroupName:Optional[str] = None)->int:
        ...
    
    def createJoint(self,environmentHandle:int, jointType:int, jointName:Optional[str] = None)->int:
        ...
    
    def doesIkGroupExist(self,environmentHandle:int, ikGroupName:str)->bool:
        ...
    
    def doesObjectExist(self,environmentHandle:int, objectName:str)->bool:
        ...
    
    def duplicateEnvironment(self,environmentHandle:int)->int:
        ...
    
    def eraseEnvironment(self,environmentHandle:int)->None:
        ...
    
    def eraseObject(self,environmentHandle:int, objectHandle:int)->None:
        ...
    
    def findConfig(self,environmentHandle:int, ikGroupHandle:int, jointHandles:list[int], thresholdDist:Optional[float] = None, maxTime:Optional[float] = None, metric:Optional[list[float]] = None, validationCallback:Optional[str] = None, auxData:Optional[dict] = None)->list[float]:
        ...
    
    def generatePath(self,environmentHandle:int, ikGroupHandle:int, jointHandles:list[int], tipHandle:int, pathPointCount:int, validationCallback:Optional[str] = None, auxData:Optional[dict] = None)->list[float]:
        ...
    
    def getAlternateConfigs(self,environmentHandle:int, jointHandles:list[int], lowLimits:Optional[list[float]] = None, ranges:Optional[list[float]] = None)->list[float]:
        ...
    
    def getIkElementBase(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int)->tuple[int, int]:
        ...
    
    def getIkElementConstraints(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int)->int:
        ...
    
    def getIkElementFlags(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int)->int:
        ...
    
    def getIkElementPrecision(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int)->list[float]:
        ...
    
    def getIkElementWeights(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int)->list[float]:
        ...
    
    def getIkGroupCalculation(self,environmentHandle:int, ikGroupHandle:int)->tuple[int, float, int]:
        ...
    
    def getIkGroupFlags(self,environmentHandle:int, ikGroupHandle:int)->int:
        ...
    
    def getIkGroupHandle(self,environmentHandle:int, ikGroupName:str)->int:
        ...
    
    def getJacobian(self,environmentHandle:int, ikGroupHandle:int)->tuple[list[float], list[int]]:
        ...
    
    def getJointDependency(self,environmentHandle:int, jointHandle:int)->tuple[int, float, float]:
        ...
    
    def getJointIkWeight(self,environmentHandle:int, jointHandle:int)->float:
        ...
    
    def getJointInterval(self,environmentHandle:int, jointHandle:int)->tuple[bool, list[float]]:
        ...
    
    def getJointMatrix(self,environmentHandle:int, jointHandle:int)->list[float]:
        ...
    
    def getJointMaxStepSize(self,environmentHandle:int, jointHandle:int)->float:
        ...
    
    def getJointMode(self,environmentHandle:int, jointHandle:int)->int:
        ...
    
    def getJointPosition(self,environmentHandle:int, jointHandle:int)->float:
        ...
    
    def getJointScrewPitch(self,environmentHandle:int, jointHandle:int)->float:
        ...
    
    def getJointTransformation(self,environmentHandle:int, jointHandle:int)->tuple[list[float], list[float], list[float]]:
        ...
    
    def getJointType(self,environmentHandle:int, jointHandle:int)->int:
        ...
    
    def getLinkedDummy(self,environmentHandle:int, dummyHandle:int)->int:
        ...
    
    def getManipulability(self,environmentHandle:int, ikGroupHandle:int)->float:
        ...
    
    def getObjectHandle(self,environmentHandle:int, objectName:str)->int:
        ...
    
    def getObjectMatrix(self,environmentHandle:int, objectHandle:int, relativeToObjectHandle:int)->list[float]:
        ...
    
    def getObjectParent(self,environmentHandle:int, objectHandle:int)->int:
        ...
    
    def getObjectPose(self,environmentHandle:int, objectHandle:int, relativeToObjectHandle:int)->list[float]:
        ...
    
    def getObjectTransformation(self,environmentHandle:int, objectHandle:int, relativeToObjectHandle:int)->tuple[list[float], list[float], list[float]]:
        ...
    
    def getObjects(self,environmentHandle:int, index:int)->tuple[int, str, bool, int]:
        ...
    
    def handleIkGroup(self,environmentHandle:int, ikGroupHandle:Optional[int] = None)->int:
        ...
    
    def load(self,environmentHandle:int, data:str)->None:
        ...
    
    def save(self,environmentHandle:int)->str:
        ...
    
    def setIkElementBase(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int, baseHandle:int, constraintsBaseHandle:Optional[int] = None)->None:
        ...
    
    def setIkElementConstraints(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int, constraints:int)->None:
        ...
    
    def setIkElementFlags(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int, flags:int)->None:
        ...
    
    def setIkElementPrecision(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int, precision:list[float])->None:
        ...
    
    def setIkElementWeights(self,environmentHandle:int, ikGroupHandle:int, elementHandle:int, weights:list[float])->None:
        ...
    
    def setIkGroupCalculation(self,environmentHandle:int, ikGroupHandle:int, method:int, damping:float, maxIterations:int)->None:
        ...
    
    def setIkGroupFlags(self,environmentHandle:int, ikGroupHandle:int, flags:int)->None:
        ...
    
    def setJointDependency(self,environmentHandle:int, jointHandle:int, depJointHandle:int, offset:Optional[float] = None, mult:Optional[float] = None)->None:
        ...
    
    def setJointIkWeight(self,environmentHandle:int, jointHandle:int, weight:float)->None:
        ...
    
    def setJointInterval(self,environmentHandle:int, jointHandle:int, cyclic:bool, interval:Optional[list[float]] = None)->None:
        ...
    
    def setJointMaxStepSize(self,environmentHandle:int, jointHandle:int, stepSize:float)->None:
        ...
    
    def setJointMode(self,environmentHandle:int, jointHandle:int, jointMode:int)->None:
        ...
    
    def setJointPosition(self,environmentHandle:int, jointHandle:int, position:float)->None:
        ...
    
    def setJointScrewPitch(self,environmentHandle:int, jointHandle:int, pitch:float)->None:
        ...
    
    def setLinkedDummy(self,environmentHandle:int, dummyHandle:int, linkedDummyHandle:int)->None:
        ...
    
    def setObjectMatrix(self,environmentHandle:int, objectHandle:int, relativeToObjectHandle:int, matrix:list[float])->None:
        ...
    
    def setObjectParent(self,environmentHandle:int, objectHandle:int, parentObjectHandle:int, keepInPlace:Optional[bool] = None)->None:
        ...
    
    def setObjectPose(self,environmentHandle:int, objectHandle:int, relativeToObjectHandle:int, pose:list[float])->None:
        ...
    
    def setObjectTransformation(self,environmentHandle:int, objectHandle:int, relativeToObjectHandle:int, position:list[float], eulerOrQuaternion:list[float])->None:
        ...
    
    def setSphericalJointMatrix(self,environmentHandle:int, jointHandle:int, matrix:list[float])->None:
        ...
    
    def setSphericalJointRotation(self,environmentHandle:int, jointHandle:int, eulerOrQuaternion:list[float])->None:
        ...

